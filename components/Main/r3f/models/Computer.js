/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useSpring } from "framer-motion";
import { useMotionAsState } from "framer-motion-hooks";
import * as THREE from "three";

const modelScale = new THREE.Vector3(1.15, 0.97, 4.59);

export default function Computer(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/main/models/Computer.gltf");
  const scale = useSpring(props.ID ? 1 : 0, {
    damping: 200,
    stiffness: 1200,
    restDelta: 0.00001,
  });
  const scaleState = useMotionAsState(scale);

  useFrame(() => {
    // if (!props.ID || props.selected) return;
    if (props.ID && props.selected) {
      if (Math.abs(group.current.rotation.y - 0) < 0.01) return;
      let rotateY = group.current.rotation.y;
      let delta = Math.abs(rotateY - 0);
      let k = rotateY / Math.abs(rotateY);
      group.current.rotateY(delta * 0.15 * k * -1);
    }
    let k = props.ID ? 1 : -1;
    group.current.rotateY((Math.PI / 600) * k);
  });

  useEffect(() => {
    if (props.selected && props.ID) {
      scale.set(0);
    } else {
      console.log(group.current.rotation);
      scale.set(1);
    }
  }, [props.selected]);

  useEffect(() => {
    console.log(scaleState);
  }, [scaleState]);

  return (
    <group
      {...props}
      dispose={null}
      scale={scaleState ? scaleState : props.ID ? 1 : 0}
    >
      <group ref={group} position={[0, 0, 0]} scale={[1.15, 0.97, 4.59]}>
        <mesh geometry={nodes.Cube017.geometry} material={materials.White} />
        <mesh geometry={nodes.Cube017_1.geometry} material={materials.Blue} />
        <mesh geometry={nodes.Cube017_2.geometry} material={materials.Screen} />
      </group>
    </group>
  );
}

useGLTF.preload("/main/models/Computer.gltf");
